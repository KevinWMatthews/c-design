
/home/kmatthews/src/c/design_patterns/build/bin/signal_flag_bad:     file format elf64-x86-64

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000020  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000358  0000000000000358  00000358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000037c  000000000000037c  0000037c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000000003a0  00000000000003a0  000003a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000108  00000000000003c8  00000000000003c8  000003c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       000000d1  00000000000004d0  00000000000004d0  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000016  00000000000005a2  00000000000005a2  000005a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000050  00000000000005b8  00000000000005b8  000005b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000c0  0000000000000608  0000000000000608  00000608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000078  00000000000006c8  00000000000006c8  000006c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000060  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  0000000000001080  0000000000001080  00001080  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      00000050  0000000000001090  0000000000001090  00001090  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         00000325  00000000000010e0  00000000000010e0  000010e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  0000000000001408  0000000000001408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       000000c0  0000000000002000  0000000000002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 0000004c  00000000000020c0  00000000000020c0  000020c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     00000128  0000000000002110  0000000000002110  00002110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000008  0000000000003d88  0000000000003d88  00002d88  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000003d90  0000000000003d90  00002d90  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000200  0000000000003d98  0000000000003d98  00002d98  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000068  0000000000003f98  0000000000003f98  00002f98  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000010  0000000000004000  0000000000004000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000008  0000000000004010  0000000000004010  00003010  2**2
                  ALLOC
 26 .comment      0000002a  0000000000000000  0000000000000000  00003010  2**0
                  CONTENTS, READONLY
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   00000aec  0000000000000000  0000000000000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 000002b3  0000000000000000  0000000000000000  00003b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   0000032e  0000000000000000  0000000000000000  00003e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    0000056e  0000000000000000  0000000000000000  00004147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_loc    00000172  0000000000000000  0000000000000000  000046b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_ranges 00000060  0000000000000000  0000000000000000  00004827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 7a 2f 00 00    	pushq  0x2f7a(%rip)        # 3fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 7b 2f 00 00 	bnd jmpq *0x2f7b(%rip)        # 3fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop

Disassembly of section .plt.got:

0000000000001080 <__cxa_finalize@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 6d 2f 00 00 	bnd jmpq *0x2f6d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001090 <puts@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 15 2f 00 00 	bnd jmpq *0x2f15(%rip)        # 3fb0 <puts@GLIBC_2.2.5>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010a0 <sigaction@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 0d 2f 00 00 	bnd jmpq *0x2f0d(%rip)        # 3fb8 <sigaction@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010b0 <__stack_chk_fail@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 05 2f 00 00 	bnd jmpq *0x2f05(%rip)        # 3fc0 <__stack_chk_fail@GLIBC_2.4>
    10bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010c0 <__assert_fail@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 fd 2e 00 00 	bnd jmpq *0x2efd(%rip)        # 3fc8 <__assert_fail@GLIBC_2.2.5>
    10cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010d0 <sigemptyset@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 f5 2e 00 00 	bnd jmpq *0x2ef5(%rip)        # 3fd0 <sigemptyset@GLIBC_2.2.5>
    10db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010e0 <main>:
    // Print statements are not signal safe!
    flag = 1;
}

int main(void)
{
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	53                   	push   %rbx
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    10e5:	48 8d 3d 18 0f 00 00 	lea    0xf18(%rip),%rdi        # 2004 <_IO_stdin_used+0x4>
    int err;

    printf("Setting SIGINT handler\n");
    int flags = 0;

    sigset_t sigset = {0};
    10ec:	31 db                	xor    %ebx,%ebx
{
    10ee:	48 81 ec c0 01 00 00 	sub    $0x1c0,%rsp
    10f5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    10fc:	00 00 
    10fe:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
    1105:	00 
    1106:	31 c0                	xor    %eax,%eax
    1108:	e8 83 ff ff ff       	callq  1090 <puts@plt>
    110d:	48 8d 3d fc 0e 00 00 	lea    0xefc(%rip),%rdi        # 2010 <_IO_stdin_used+0x10>
    1114:	e8 77 ff ff ff       	callq  1090 <puts@plt>
    sigset_t sigset = {0};
    1119:	48 89 e7             	mov    %rsp,%rdi
    111c:	b9 10 00 00 00       	mov    $0x10,%ecx
    1121:	48 89 d8             	mov    %rbx,%rax
    1124:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    err = sigemptyset(&sigset);
    1127:	48 89 e7             	mov    %rsp,%rdi
    112a:	e8 a1 ff ff ff       	callq  10d0 <sigemptyset@plt>
    assert(!err);
    112f:	85 c0                	test   %eax,%eax
    1131:	0f 85 0f 01 00 00    	jne    1246 <main+0x166>

    const struct sigaction action = {
    1137:	66 0f ef c0          	pxor   %xmm0,%xmm0
    113b:	66 0f 6f 0c 24       	movdqa (%rsp),%xmm1
    1140:	48 8d 05 39 02 00 00 	lea    0x239(%rip),%rax        # 1380 <sigint_handler>
    1147:	66 0f 6f 54 24 10    	movdqa 0x10(%rsp),%xmm2
    114d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    1154:	00 
    1155:	66 0f 6f 5c 24 20    	movdqa 0x20(%rsp),%xmm3
        // The signal that triggered the handler is blocked by default.
        .sa_mask = sigset,
        .sa_flags = flags,
    };
    int signo = SIGINT;
    struct sigaction old_action = {0};
    115b:	48 89 d8             	mov    %rbx,%rax
    115e:	48 8d bc 24 20 01 00 	lea    0x120(%rsp),%rdi
    1165:	00 
    const struct sigaction action = {
    1166:	66 0f 6f 64 24 30    	movdqa 0x30(%rsp),%xmm4
    116c:	66 0f 6f 6c 24 40    	movdqa 0x40(%rsp),%xmm5
    1172:	0f 11 84 24 08 01 00 	movups %xmm0,0x108(%rsp)
    1179:	00 
    struct sigaction old_action = {0};
    117a:	b9 13 00 00 00       	mov    $0x13,%ecx
    117f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    const struct sigaction action = {
    1182:	66 0f 6f 74 24 50    	movdqa 0x50(%rsp),%xmm6
    err = sigaction(signo, &action, &old_action);
    1188:	bf 02 00 00 00       	mov    $0x2,%edi
    const struct sigaction action = {
    118d:	66 0f 6f 7c 24 60    	movdqa 0x60(%rsp),%xmm7
    1193:	66 0f 6f 44 24 70    	movdqa 0x70(%rsp),%xmm0
    err = sigaction(signo, &action, &old_action);
    1199:	48 8d 94 24 20 01 00 	lea    0x120(%rsp),%rdx
    11a0:	00 
    11a1:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
    11a8:	00 
    const struct sigaction action = {
    11a9:	0f 11 8c 24 88 00 00 	movups %xmm1,0x88(%rsp)
    11b0:	00 
    11b1:	0f 11 94 24 98 00 00 	movups %xmm2,0x98(%rsp)
    11b8:	00 
    11b9:	0f 11 9c 24 a8 00 00 	movups %xmm3,0xa8(%rsp)
    11c0:	00 
    11c1:	0f 11 a4 24 b8 00 00 	movups %xmm4,0xb8(%rsp)
    11c8:	00 
    11c9:	0f 11 ac 24 c8 00 00 	movups %xmm5,0xc8(%rsp)
    11d0:	00 
    11d1:	0f 11 b4 24 d8 00 00 	movups %xmm6,0xd8(%rsp)
    11d8:	00 
    11d9:	0f 11 bc 24 e8 00 00 	movups %xmm7,0xe8(%rsp)
    11e0:	00 
    11e1:	0f 11 84 24 f8 00 00 	movups %xmm0,0xf8(%rsp)
    11e8:	00 
    err = sigaction(signo, &action, &old_action);
    11e9:	e8 b2 fe ff ff       	callq  10a0 <sigaction@plt>
    assert(!err);
    11ee:	85 c0                	test   %eax,%eax
    11f0:	75 78                	jne    126a <main+0x18a>
    11f2:	48 8d 3d 33 0e 00 00 	lea    0xe33(%rip),%rdi        # 202c <_IO_stdin_used+0x2c>
    11f9:	e8 92 fe ff ff       	callq  1090 <puts@plt>
    11fe:	8b 05 10 2e 00 00    	mov    0x2e10(%rip),%eax        # 4014 <flag>
    1204:	85 c0                	test   %eax,%eax
    1206:	75 08                	jne    1210 <main+0x130>

    printf("Waiting for SIGINT...\n");
    while (1)
    {
        // BUG: access can be optimized away
        if (flag)
    1208:	eb fe                	jmp    1208 <main+0x128>
    120a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1210:	48 8d 3d 2b 0e 00 00 	lea    0xe2b(%rip),%rdi        # 2042 <_IO_stdin_used+0x42>
    1217:	e8 74 fe ff ff       	callq  1090 <puts@plt>
    121c:	48 8d 3d 37 0e 00 00 	lea    0xe37(%rip),%rdi        # 205a <_IO_stdin_used+0x5a>
    1223:	e8 68 fe ff ff       	callq  1090 <puts@plt>
        }
    }

    printf("Done\n");
    return 0;
}
    1228:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
    122f:	00 
    1230:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1237:	00 00 
    1239:	75 2a                	jne    1265 <main+0x185>
    123b:	48 81 c4 c0 01 00 00 	add    $0x1c0,%rsp
    1242:	31 c0                	xor    %eax,%eax
    1244:	5b                   	pop    %rbx
    1245:	c3                   	retq   
    assert(!err);
    1246:	48 8d 0d 6e 0e 00 00 	lea    0xe6e(%rip),%rcx        # 20bb <__PRETTY_FUNCTION__.2994>
    124d:	ba 1c 00 00 00       	mov    $0x1c,%edx
    1252:	48 8d 35 07 0e 00 00 	lea    0xe07(%rip),%rsi        # 2060 <_IO_stdin_used+0x60>
    1259:	48 8d 3d c7 0d 00 00 	lea    0xdc7(%rip),%rdi        # 2027 <_IO_stdin_used+0x27>
    1260:	e8 5b fe ff ff       	callq  10c0 <__assert_fail@plt>
}
    1265:	e8 46 fe ff ff       	callq  10b0 <__stack_chk_fail@plt>
    assert(!err);
    126a:	48 8d 0d 4a 0e 00 00 	lea    0xe4a(%rip),%rcx        # 20bb <__PRETTY_FUNCTION__.2994>
    1271:	ba 28 00 00 00       	mov    $0x28,%edx
    1276:	48 8d 35 e3 0d 00 00 	lea    0xde3(%rip),%rsi        # 2060 <_IO_stdin_used+0x60>
    127d:	48 8d 3d a3 0d 00 00 	lea    0xda3(%rip),%rdi        # 2027 <_IO_stdin_used+0x27>
    1284:	e8 37 fe ff ff       	callq  10c0 <__assert_fail@plt>
    1289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001290 <_start>:
    1290:	f3 0f 1e fa          	endbr64 
    1294:	31 ed                	xor    %ebp,%ebp
    1296:	49 89 d1             	mov    %rdx,%r9
    1299:	5e                   	pop    %rsi
    129a:	48 89 e2             	mov    %rsp,%rdx
    129d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    12a1:	50                   	push   %rax
    12a2:	54                   	push   %rsp
    12a3:	4c 8d 05 56 01 00 00 	lea    0x156(%rip),%r8        # 1400 <__libc_csu_fini>
    12aa:	48 8d 0d df 00 00 00 	lea    0xdf(%rip),%rcx        # 1390 <__libc_csu_init>
    12b1:	48 8d 3d 28 fe ff ff 	lea    -0x1d8(%rip),%rdi        # 10e0 <main>
    12b8:	ff 15 22 2d 00 00    	callq  *0x2d22(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    12be:	f4                   	hlt    
    12bf:	90                   	nop

00000000000012c0 <deregister_tm_clones>:
    12c0:	48 8d 3d 49 2d 00 00 	lea    0x2d49(%rip),%rdi        # 4010 <__TMC_END__>
    12c7:	48 8d 05 42 2d 00 00 	lea    0x2d42(%rip),%rax        # 4010 <__TMC_END__>
    12ce:	48 39 f8             	cmp    %rdi,%rax
    12d1:	74 15                	je     12e8 <deregister_tm_clones+0x28>
    12d3:	48 8b 05 fe 2c 00 00 	mov    0x2cfe(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    12da:	48 85 c0             	test   %rax,%rax
    12dd:	74 09                	je     12e8 <deregister_tm_clones+0x28>
    12df:	ff e0                	jmpq   *%rax
    12e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    12e8:	c3                   	retq   
    12e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000012f0 <register_tm_clones>:
    12f0:	48 8d 3d 19 2d 00 00 	lea    0x2d19(%rip),%rdi        # 4010 <__TMC_END__>
    12f7:	48 8d 35 12 2d 00 00 	lea    0x2d12(%rip),%rsi        # 4010 <__TMC_END__>
    12fe:	48 29 fe             	sub    %rdi,%rsi
    1301:	48 89 f0             	mov    %rsi,%rax
    1304:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1308:	48 c1 f8 03          	sar    $0x3,%rax
    130c:	48 01 c6             	add    %rax,%rsi
    130f:	48 d1 fe             	sar    %rsi
    1312:	74 14                	je     1328 <register_tm_clones+0x38>
    1314:	48 8b 05 d5 2c 00 00 	mov    0x2cd5(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    131b:	48 85 c0             	test   %rax,%rax
    131e:	74 08                	je     1328 <register_tm_clones+0x38>
    1320:	ff e0                	jmpq   *%rax
    1322:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1328:	c3                   	retq   
    1329:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001330 <__do_global_dtors_aux>:
    1330:	f3 0f 1e fa          	endbr64 
    1334:	80 3d d5 2c 00 00 00 	cmpb   $0x0,0x2cd5(%rip)        # 4010 <__TMC_END__>
    133b:	75 2b                	jne    1368 <__do_global_dtors_aux+0x38>
    133d:	55                   	push   %rbp
    133e:	48 83 3d b2 2c 00 00 	cmpq   $0x0,0x2cb2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1345:	00 
    1346:	48 89 e5             	mov    %rsp,%rbp
    1349:	74 0c                	je     1357 <__do_global_dtors_aux+0x27>
    134b:	48 8b 3d b6 2c 00 00 	mov    0x2cb6(%rip),%rdi        # 4008 <__dso_handle>
    1352:	e8 29 fd ff ff       	callq  1080 <__cxa_finalize@plt>
    1357:	e8 64 ff ff ff       	callq  12c0 <deregister_tm_clones>
    135c:	c6 05 ad 2c 00 00 01 	movb   $0x1,0x2cad(%rip)        # 4010 <__TMC_END__>
    1363:	5d                   	pop    %rbp
    1364:	c3                   	retq   
    1365:	0f 1f 00             	nopl   (%rax)
    1368:	c3                   	retq   
    1369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001370 <frame_dummy>:
    1370:	f3 0f 1e fa          	endbr64 
    1374:	e9 77 ff ff ff       	jmpq   12f0 <register_tm_clones>
    1379:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001380 <sigint_handler>:
{
    1380:	f3 0f 1e fa          	endbr64 
    flag = 1;
    1384:	c7 05 86 2c 00 00 01 	movl   $0x1,0x2c86(%rip)        # 4014 <flag>
    138b:	00 00 00 
}
    138e:	c3                   	retq   
    138f:	90                   	nop

0000000000001390 <__libc_csu_init>:
    1390:	f3 0f 1e fa          	endbr64 
    1394:	41 57                	push   %r15
    1396:	4c 8d 3d eb 29 00 00 	lea    0x29eb(%rip),%r15        # 3d88 <__frame_dummy_init_array_entry>
    139d:	41 56                	push   %r14
    139f:	49 89 d6             	mov    %rdx,%r14
    13a2:	41 55                	push   %r13
    13a4:	49 89 f5             	mov    %rsi,%r13
    13a7:	41 54                	push   %r12
    13a9:	41 89 fc             	mov    %edi,%r12d
    13ac:	55                   	push   %rbp
    13ad:	48 8d 2d dc 29 00 00 	lea    0x29dc(%rip),%rbp        # 3d90 <__do_global_dtors_aux_fini_array_entry>
    13b4:	53                   	push   %rbx
    13b5:	4c 29 fd             	sub    %r15,%rbp
    13b8:	48 83 ec 08          	sub    $0x8,%rsp
    13bc:	e8 3f fc ff ff       	callq  1000 <_init>
    13c1:	48 c1 fd 03          	sar    $0x3,%rbp
    13c5:	74 1f                	je     13e6 <__libc_csu_init+0x56>
    13c7:	31 db                	xor    %ebx,%ebx
    13c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    13d0:	4c 89 f2             	mov    %r14,%rdx
    13d3:	4c 89 ee             	mov    %r13,%rsi
    13d6:	44 89 e7             	mov    %r12d,%edi
    13d9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    13dd:	48 83 c3 01          	add    $0x1,%rbx
    13e1:	48 39 dd             	cmp    %rbx,%rbp
    13e4:	75 ea                	jne    13d0 <__libc_csu_init+0x40>
    13e6:	48 83 c4 08          	add    $0x8,%rsp
    13ea:	5b                   	pop    %rbx
    13eb:	5d                   	pop    %rbp
    13ec:	41 5c                	pop    %r12
    13ee:	41 5d                	pop    %r13
    13f0:	41 5e                	pop    %r14
    13f2:	41 5f                	pop    %r15
    13f4:	c3                   	retq   
    13f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13fc:	00 00 00 00 

0000000000001400 <__libc_csu_fini>:
    1400:	f3 0f 1e fa          	endbr64 
    1404:	c3                   	retq   

Disassembly of section .fini:

0000000000001408 <_fini>:
    1408:	f3 0f 1e fa          	endbr64 
    140c:	48 83 ec 08          	sub    $0x8,%rsp
    1410:	48 83 c4 08          	add    $0x8,%rsp
    1414:	c3                   	retq   
