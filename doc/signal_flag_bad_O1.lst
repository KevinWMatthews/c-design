
/home/kmatthews/src/c/design_patterns/build/bin/signal_flag_bad:     file format elf64-x86-64

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000020  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000358  0000000000000358  00000358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000037c  000000000000037c  0000037c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000000003a0  00000000000003a0  000003a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000108  00000000000003c8  00000000000003c8  000003c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       000000d1  00000000000004d0  00000000000004d0  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000016  00000000000005a2  00000000000005a2  000005a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000050  00000000000005b8  00000000000005b8  000005b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000c0  0000000000000608  0000000000000608  00000608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000078  00000000000006c8  00000000000006c8  000006c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000060  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  0000000000001080  0000000000001080  00001080  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      00000050  0000000000001090  0000000000001090  00001090  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         00000325  00000000000010e0  00000000000010e0  000010e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  0000000000001408  0000000000001408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       000000c0  0000000000002000  0000000000002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 0000004c  00000000000020c0  00000000000020c0  000020c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     00000120  0000000000002110  0000000000002110  00002110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000008  0000000000003d88  0000000000003d88  00002d88  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000003d90  0000000000003d90  00002d90  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000200  0000000000003d98  0000000000003d98  00002d98  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000068  0000000000003f98  0000000000003f98  00002f98  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000010  0000000000004000  0000000000004000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000008  0000000000004010  0000000000004010  00003010  2**2
                  ALLOC
 26 .comment      0000002a  0000000000000000  0000000000000000  00003010  2**0
                  CONTENTS, READONLY
 27 .debug_aranges 00000030  0000000000000000  0000000000000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   00000b00  0000000000000000  0000000000000000  0000306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 0000029d  0000000000000000  0000000000000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   000002de  0000000000000000  0000000000000000  00003e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    0000056e  0000000000000000  0000000000000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_loc    00000172  0000000000000000  0000000000000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 7a 2f 00 00    	pushq  0x2f7a(%rip)        # 3fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 7b 2f 00 00 	bnd jmpq *0x2f7b(%rip)        # 3fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop

Disassembly of section .plt.got:

0000000000001080 <__cxa_finalize@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 6d 2f 00 00 	bnd jmpq *0x2f6d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001090 <puts@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 15 2f 00 00 	bnd jmpq *0x2f15(%rip)        # 3fb0 <puts@GLIBC_2.2.5>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010a0 <sigaction@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 0d 2f 00 00 	bnd jmpq *0x2f0d(%rip)        # 3fb8 <sigaction@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010b0 <__stack_chk_fail@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 05 2f 00 00 	bnd jmpq *0x2f05(%rip)        # 3fc0 <__stack_chk_fail@GLIBC_2.4>
    10bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010c0 <__assert_fail@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 fd 2e 00 00 	bnd jmpq *0x2efd(%rip)        # 3fc8 <__assert_fail@GLIBC_2.2.5>
    10cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010d0 <sigemptyset@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 f5 2e 00 00 	bnd jmpq *0x2ef5(%rip)        # 3fd0 <sigemptyset@GLIBC_2.2.5>
    10db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010e0 <_start>:
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	31 ed                	xor    %ebp,%ebp
    10e6:	49 89 d1             	mov    %rdx,%r9
    10e9:	5e                   	pop    %rsi
    10ea:	48 89 e2             	mov    %rsp,%rdx
    10ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    10f1:	50                   	push   %rax
    10f2:	54                   	push   %rsp
    10f3:	4c 8d 05 06 03 00 00 	lea    0x306(%rip),%r8        # 1400 <__libc_csu_fini>
    10fa:	48 8d 0d 8f 02 00 00 	lea    0x28f(%rip),%rcx        # 1390 <__libc_csu_init>
    1101:	48 8d 3d d0 00 00 00 	lea    0xd0(%rip),%rdi        # 11d8 <main>
    1108:	ff 15 d2 2e 00 00    	callq  *0x2ed2(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    110e:	f4                   	hlt    
    110f:	90                   	nop

0000000000001110 <deregister_tm_clones>:
    1110:	48 8d 3d f9 2e 00 00 	lea    0x2ef9(%rip),%rdi        # 4010 <__TMC_END__>
    1117:	48 8d 05 f2 2e 00 00 	lea    0x2ef2(%rip),%rax        # 4010 <__TMC_END__>
    111e:	48 39 f8             	cmp    %rdi,%rax
    1121:	74 15                	je     1138 <deregister_tm_clones+0x28>
    1123:	48 8b 05 ae 2e 00 00 	mov    0x2eae(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    112a:	48 85 c0             	test   %rax,%rax
    112d:	74 09                	je     1138 <deregister_tm_clones+0x28>
    112f:	ff e0                	jmpq   *%rax
    1131:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1138:	c3                   	retq   
    1139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001140 <register_tm_clones>:
    1140:	48 8d 3d c9 2e 00 00 	lea    0x2ec9(%rip),%rdi        # 4010 <__TMC_END__>
    1147:	48 8d 35 c2 2e 00 00 	lea    0x2ec2(%rip),%rsi        # 4010 <__TMC_END__>
    114e:	48 29 fe             	sub    %rdi,%rsi
    1151:	48 89 f0             	mov    %rsi,%rax
    1154:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1158:	48 c1 f8 03          	sar    $0x3,%rax
    115c:	48 01 c6             	add    %rax,%rsi
    115f:	48 d1 fe             	sar    %rsi
    1162:	74 14                	je     1178 <register_tm_clones+0x38>
    1164:	48 8b 05 85 2e 00 00 	mov    0x2e85(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    116b:	48 85 c0             	test   %rax,%rax
    116e:	74 08                	je     1178 <register_tm_clones+0x38>
    1170:	ff e0                	jmpq   *%rax
    1172:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1178:	c3                   	retq   
    1179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001180 <__do_global_dtors_aux>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	80 3d 85 2e 00 00 00 	cmpb   $0x0,0x2e85(%rip)        # 4010 <__TMC_END__>
    118b:	75 2b                	jne    11b8 <__do_global_dtors_aux+0x38>
    118d:	55                   	push   %rbp
    118e:	48 83 3d 62 2e 00 00 	cmpq   $0x0,0x2e62(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1195:	00 
    1196:	48 89 e5             	mov    %rsp,%rbp
    1199:	74 0c                	je     11a7 <__do_global_dtors_aux+0x27>
    119b:	48 8b 3d 66 2e 00 00 	mov    0x2e66(%rip),%rdi        # 4008 <__dso_handle>
    11a2:	e8 d9 fe ff ff       	callq  1080 <__cxa_finalize@plt>
    11a7:	e8 64 ff ff ff       	callq  1110 <deregister_tm_clones>
    11ac:	c6 05 5d 2e 00 00 01 	movb   $0x1,0x2e5d(%rip)        # 4010 <__TMC_END__>
    11b3:	5d                   	pop    %rbp
    11b4:	c3                   	retq   
    11b5:	0f 1f 00             	nopl   (%rax)
    11b8:	c3                   	retq   
    11b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011c0 <frame_dummy>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	e9 77 ff ff ff       	jmpq   1140 <register_tm_clones>

00000000000011c9 <sigint_handler>:
// BUG: this must be volatile!
// Without the volatile qualifier, access can be optimized away
sig_atomic_t flag;

void sigint_handler(int signo)
{
    11c9:	f3 0f 1e fa          	endbr64 
    // Print statements are not signal safe!
    flag = 1;
    11cd:	c7 05 3d 2e 00 00 01 	movl   $0x1,0x2e3d(%rip)        # 4014 <flag>
    11d4:	00 00 00 
}
    11d7:	c3                   	retq   

00000000000011d8 <main>:

int main(void)
{
    11d8:	f3 0f 1e fa          	endbr64 
    11dc:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    11e3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    11ea:	00 00 
    11ec:	48 89 84 24 b8 01 00 	mov    %rax,0x1b8(%rsp)
    11f3:	00 
    11f4:	31 c0                	xor    %eax,%eax
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    11f6:	48 8d 3d 07 0e 00 00 	lea    0xe07(%rip),%rdi        # 2004 <_IO_stdin_used+0x4>
    11fd:	e8 8e fe ff ff       	callq  1090 <puts@plt>
    1202:	48 8d 3d 07 0e 00 00 	lea    0xe07(%rip),%rdi        # 2010 <_IO_stdin_used+0x10>
    1209:	e8 82 fe ff ff       	callq  1090 <puts@plt>
    int err;

    printf("Setting SIGINT handler\n");
    int flags = 0;

    sigset_t sigset = {0};
    120e:	48 89 e7             	mov    %rsp,%rdi
    1211:	b9 10 00 00 00       	mov    $0x10,%ecx
    1216:	b8 00 00 00 00       	mov    $0x0,%eax
    121b:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    err = sigemptyset(&sigset);
    121e:	48 89 e7             	mov    %rsp,%rdi
    1221:	e8 aa fe ff ff       	callq  10d0 <sigemptyset@plt>
    assert(!err);
    1226:	85 c0                	test   %eax,%eax
    1228:	0f 85 17 01 00 00    	jne    1345 <main+0x16d>

    const struct sigaction action = {
    122e:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
    1235:	00 00 00 00 00 
    123a:	48 c7 84 24 10 01 00 	movq   $0x0,0x110(%rsp)
    1241:	00 00 00 00 00 
    1246:	48 8d 05 7c ff ff ff 	lea    -0x84(%rip),%rax        # 11c9 <sigint_handler>
    124d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    1254:	00 
    1255:	66 0f 6f 04 24       	movdqa (%rsp),%xmm0
    125a:	0f 11 84 24 88 00 00 	movups %xmm0,0x88(%rsp)
    1261:	00 
    1262:	66 0f 6f 4c 24 10    	movdqa 0x10(%rsp),%xmm1
    1268:	0f 11 8c 24 98 00 00 	movups %xmm1,0x98(%rsp)
    126f:	00 
    1270:	66 0f 6f 54 24 20    	movdqa 0x20(%rsp),%xmm2
    1276:	0f 11 94 24 a8 00 00 	movups %xmm2,0xa8(%rsp)
    127d:	00 
    127e:	66 0f 6f 5c 24 30    	movdqa 0x30(%rsp),%xmm3
    1284:	0f 11 9c 24 b8 00 00 	movups %xmm3,0xb8(%rsp)
    128b:	00 
    128c:	66 0f 6f 64 24 40    	movdqa 0x40(%rsp),%xmm4
    1292:	0f 11 a4 24 c8 00 00 	movups %xmm4,0xc8(%rsp)
    1299:	00 
    129a:	66 0f 6f 6c 24 50    	movdqa 0x50(%rsp),%xmm5
    12a0:	0f 11 ac 24 d8 00 00 	movups %xmm5,0xd8(%rsp)
    12a7:	00 
    12a8:	66 0f 6f 74 24 60    	movdqa 0x60(%rsp),%xmm6
    12ae:	0f 11 b4 24 e8 00 00 	movups %xmm6,0xe8(%rsp)
    12b5:	00 
    12b6:	66 0f 6f 7c 24 70    	movdqa 0x70(%rsp),%xmm7
    12bc:	0f 11 bc 24 f8 00 00 	movups %xmm7,0xf8(%rsp)
    12c3:	00 
        // The signal that triggered the handler is blocked by default.
        .sa_mask = sigset,
        .sa_flags = flags,
    };
    int signo = SIGINT;
    struct sigaction old_action = {0};
    12c4:	48 8d bc 24 20 01 00 	lea    0x120(%rsp),%rdi
    12cb:	00 
    12cc:	b9 13 00 00 00       	mov    $0x13,%ecx
    12d1:	b8 00 00 00 00       	mov    $0x0,%eax
    12d6:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    err = sigaction(signo, &action, &old_action);
    12d9:	48 8d 94 24 20 01 00 	lea    0x120(%rsp),%rdx
    12e0:	00 
    12e1:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
    12e8:	00 
    12e9:	bf 02 00 00 00       	mov    $0x2,%edi
    12ee:	e8 ad fd ff ff       	callq  10a0 <sigaction@plt>
    assert(!err);
    12f3:	85 c0                	test   %eax,%eax
    12f5:	75 6d                	jne    1364 <main+0x18c>
    12f7:	48 8d 3d 2e 0d 00 00 	lea    0xd2e(%rip),%rdi        # 202c <_IO_stdin_used+0x2c>
    12fe:	e8 8d fd ff ff       	callq  1090 <puts@plt>

    printf("Waiting for SIGINT...\n");
    while (1)
    {
        // BUG: access can be optimized away
        if (flag)
    1303:	8b 05 0b 2d 00 00    	mov    0x2d0b(%rip),%eax        # 4014 <flag>
    1309:	85 c0                	test   %eax,%eax
    130b:	74 fc                	je     1309 <main+0x131>
    130d:	48 8d 3d 2e 0d 00 00 	lea    0xd2e(%rip),%rdi        # 2042 <_IO_stdin_used+0x42>
    1314:	e8 77 fd ff ff       	callq  1090 <puts@plt>
    1319:	48 8d 3d 3a 0d 00 00 	lea    0xd3a(%rip),%rdi        # 205a <_IO_stdin_used+0x5a>
    1320:	e8 6b fd ff ff       	callq  1090 <puts@plt>
        }
    }

    printf("Done\n");
    return 0;
}
    1325:	48 8b 84 24 b8 01 00 	mov    0x1b8(%rsp),%rax
    132c:	00 
    132d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1334:	00 00 
    1336:	75 4b                	jne    1383 <main+0x1ab>
    1338:	b8 00 00 00 00       	mov    $0x0,%eax
    133d:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    1344:	c3                   	retq   
    assert(!err);
    1345:	48 8d 0d 6f 0d 00 00 	lea    0xd6f(%rip),%rcx        # 20bb <__PRETTY_FUNCTION__.2994>
    134c:	ba 1c 00 00 00       	mov    $0x1c,%edx
    1351:	48 8d 35 08 0d 00 00 	lea    0xd08(%rip),%rsi        # 2060 <_IO_stdin_used+0x60>
    1358:	48 8d 3d c8 0c 00 00 	lea    0xcc8(%rip),%rdi        # 2027 <_IO_stdin_used+0x27>
    135f:	e8 5c fd ff ff       	callq  10c0 <__assert_fail@plt>
    assert(!err);
    1364:	48 8d 0d 50 0d 00 00 	lea    0xd50(%rip),%rcx        # 20bb <__PRETTY_FUNCTION__.2994>
    136b:	ba 28 00 00 00       	mov    $0x28,%edx
    1370:	48 8d 35 e9 0c 00 00 	lea    0xce9(%rip),%rsi        # 2060 <_IO_stdin_used+0x60>
    1377:	48 8d 3d a9 0c 00 00 	lea    0xca9(%rip),%rdi        # 2027 <_IO_stdin_used+0x27>
    137e:	e8 3d fd ff ff       	callq  10c0 <__assert_fail@plt>
}
    1383:	e8 28 fd ff ff       	callq  10b0 <__stack_chk_fail@plt>
    1388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    138f:	00 

0000000000001390 <__libc_csu_init>:
    1390:	f3 0f 1e fa          	endbr64 
    1394:	41 57                	push   %r15
    1396:	4c 8d 3d eb 29 00 00 	lea    0x29eb(%rip),%r15        # 3d88 <__frame_dummy_init_array_entry>
    139d:	41 56                	push   %r14
    139f:	49 89 d6             	mov    %rdx,%r14
    13a2:	41 55                	push   %r13
    13a4:	49 89 f5             	mov    %rsi,%r13
    13a7:	41 54                	push   %r12
    13a9:	41 89 fc             	mov    %edi,%r12d
    13ac:	55                   	push   %rbp
    13ad:	48 8d 2d dc 29 00 00 	lea    0x29dc(%rip),%rbp        # 3d90 <__do_global_dtors_aux_fini_array_entry>
    13b4:	53                   	push   %rbx
    13b5:	4c 29 fd             	sub    %r15,%rbp
    13b8:	48 83 ec 08          	sub    $0x8,%rsp
    13bc:	e8 3f fc ff ff       	callq  1000 <_init>
    13c1:	48 c1 fd 03          	sar    $0x3,%rbp
    13c5:	74 1f                	je     13e6 <__libc_csu_init+0x56>
    13c7:	31 db                	xor    %ebx,%ebx
    13c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    13d0:	4c 89 f2             	mov    %r14,%rdx
    13d3:	4c 89 ee             	mov    %r13,%rsi
    13d6:	44 89 e7             	mov    %r12d,%edi
    13d9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    13dd:	48 83 c3 01          	add    $0x1,%rbx
    13e1:	48 39 dd             	cmp    %rbx,%rbp
    13e4:	75 ea                	jne    13d0 <__libc_csu_init+0x40>
    13e6:	48 83 c4 08          	add    $0x8,%rsp
    13ea:	5b                   	pop    %rbx
    13eb:	5d                   	pop    %rbp
    13ec:	41 5c                	pop    %r12
    13ee:	41 5d                	pop    %r13
    13f0:	41 5e                	pop    %r14
    13f2:	41 5f                	pop    %r15
    13f4:	c3                   	retq   
    13f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13fc:	00 00 00 00 

0000000000001400 <__libc_csu_fini>:
    1400:	f3 0f 1e fa          	endbr64 
    1404:	c3                   	retq   

Disassembly of section .fini:

0000000000001408 <_fini>:
    1408:	f3 0f 1e fa          	endbr64 
    140c:	48 83 ec 08          	sub    $0x8,%rsp
    1410:	48 83 c4 08          	add    $0x8,%rsp
    1414:	c3                   	retq   
